export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../../src/middleware.ts"],"names":[],"mappings":"","sourcesContent":["import { Logger } from \"./logger\";\n\nexport interface InitializeHandlerArguments<Input extends object> {\n  /**\n   * User input to a command. Reflects the userland representation of the\n   * union of data types the command can effectively handle.\n   */\n  input: Input;\n}\n\nexport interface InitializeHandlerOutput<Output extends object> extends DeserializeHandlerOutput<Output> {\n  output: Output;\n}\n\nexport interface SerializeHandlerArguments<Input extends object> extends InitializeHandlerArguments<Input> {\n  /**\n   * The user input serialized as a request object. The request object is unknown,\n   * so you cannot modify it directly. When work with request, you need to guard its\n   * type to e.g. HttpRequest with 'instanceof' operand\n   *\n   * During the build phase of the execution of a middleware stack, a built\n   * request may or may not be available.\n   */\n  request?: unknown;\n}\n\nexport interface SerializeHandlerOutput<Output extends object> extends InitializeHandlerOutput<Output> {}\n\nexport interface BuildHandlerArguments<Input extends object> extends FinalizeHandlerArguments<Input> {}\n\nexport interface BuildHandlerOutput<Output extends object> extends InitializeHandlerOutput<Output> {}\n\nexport interface FinalizeHandlerArguments<Input extends object> extends SerializeHandlerArguments<Input> {\n  /**\n   * The user input serialized as a request.\n   */\n  request: unknown;\n}\n\nexport interface FinalizeHandlerOutput<Output extends object> extends InitializeHandlerOutput<Output> {}\n\nexport interface DeserializeHandlerArguments<Input extends object> extends FinalizeHandlerArguments<Input> {}\n\nexport interface DeserializeHandlerOutput<Output extends object> {\n  /**\n   * The raw response object from runtime is deserialized to structured output object.\n   * The response object is unknown so you cannot modify it directly. When work with\n   * response, you need to guard its type to e.g. HttpResponse with 'instanceof' operand.\n   *\n   * During the deserialize phase of the execution of a middleware stack, a deserialized\n   * response may or may not be available\n   */\n  response: unknown;\n  output?: Output;\n}\n\nexport interface InitializeHandler<Input extends object, Output extends object> {\n  /**\n   * Asynchronously converts an input object into an output object.\n   *\n   * @param args  An object containing a input to the command as well as any\n   *              associated or previously generated execution artifacts.\n   */\n  (args: InitializeHandlerArguments<Input>): Promise<InitializeHandlerOutput<Output>>;\n}\n\nexport type Handler<Input extends object, Output extends object> = InitializeHandler<Input, Output>;\n\nexport interface SerializeHandler<Input extends object, Output extends object> {\n  /**\n   * Asynchronously converts an input object into an output object.\n   *\n   * @param args  An object containing a input to the command as well as any\n   *              associated or previously generated execution artifacts.\n   */\n  (args: SerializeHandlerArguments<Input>): Promise<SerializeHandlerOutput<Output>>;\n}\n\nexport interface FinalizeHandler<Input extends object, Output extends object> {\n  /**\n   * Asynchronously converts an input object into an output object.\n   *\n   * @param args  An object containing a input to the command as well as any\n   *              associated or previously generated execution artifacts.\n   */\n  (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>>;\n}\n\nexport interface BuildHandler<Input extends object, Output extends object> {\n  (args: BuildHandlerArguments<Input>): Promise<BuildHandlerOutput<Output>>;\n}\n\nexport interface DeserializeHandler<Input extends object, Output extends object> {\n  (args: DeserializeHandlerArguments<Input>): Promise<DeserializeHandlerOutput<Output>>;\n}\n\n/**\n * A factory function that creates functions implementing the {Handler}\n * interface.\n */\nexport interface InitializeMiddleware<Input extends object, Output extends object> {\n  /**\n   * @param next The handler to invoke after this middleware has operated on\n   * the user input and before this middleware operates on the output.\n   *\n   * @param context Invariant data and functions for use by the handler.\n   */\n  (next: InitializeHandler<Input, Output>, context: HandlerExecutionContext): InitializeHandler<Input, Output>;\n}\n\n/**\n * A factory function that creates functions implementing the {BuildHandler}\n * interface.\n */\nexport interface SerializeMiddleware<Input extends object, Output extends object> {\n  /**\n   * @param next The handler to invoke after this middleware has operated on\n   * the user input and before this middleware operates on the output.\n   *\n   * @param context Invariant data and functions for use by the handler.\n   */\n  (next: SerializeHandler<Input, Output>, context: HandlerExecutionContext): SerializeHandler<Input, Output>;\n}\n\n/**\n * A factory function that creates functions implementing the {FinalizeHandler}\n * interface.\n */\nexport interface FinalizeRequestMiddleware<Input extends object, Output extends object> {\n  /**\n   * @param next The handler to invoke after this middleware has operated on\n   * the user input and before this middleware operates on the output.\n   *\n   * @param context Invariant data and functions for use by the handler.\n   */\n  (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output>;\n}\n\nexport interface BuildMiddleware<Input extends object, Output extends object> {\n  (next: BuildHandler<Input, Output>, context: HandlerExecutionContext): BuildHandler<Input, Output>;\n}\n\nexport interface DeserializeMiddleware<Input extends object, Output extends object> {\n  (next: DeserializeHandler<Input, Output>, context: HandlerExecutionContext): DeserializeHandler<Input, Output>;\n}\n\nexport type MiddlewareType<Input extends object, Output extends object> =\n  | InitializeMiddleware<Input, Output>\n  | SerializeMiddleware<Input, Output>\n  | BuildMiddleware<Input, Output>\n  | FinalizeRequestMiddleware<Input, Output>\n  | DeserializeMiddleware<Input, Output>;\n\n/**\n * A factory function that creates the terminal handler atop which a middleware\n * stack sits.\n */\nexport interface Terminalware {\n  <Input extends object, Output extends object>(context: HandlerExecutionContext): DeserializeHandler<Input, Output>;\n}\n\nexport type Step = \"initialize\" | \"serialize\" | \"build\" | \"finalizeRequest\" | \"deserialize\";\n\nexport type Priority = \"high\" | \"normal\" | \"low\";\n\nexport interface HandlerOptions {\n  /**\n   * Handlers are ordered using a \"step\" that describes the stage of command\n   * execution at which the handler will be executed. The available steps are:\n   *\n   * - initialize: The input is being prepared. Examples of typical\n   *      initialization tasks include injecting default options computing\n   *      derived parameters.\n   * - serialize: The input is complete and ready to be serialized. Examples\n   *      of typical serialization tasks include input validation and building\n   *      an HTTP request from user input.\n   * - build: The input has been serialized into an HTTP request, but that\n   *      request may require further modification. Any request alterations\n   *      will be applied to all retries. Examples of typical build tasks\n   *      include injecting HTTP headers that describe a stable aspect of the\n   *      request, such as `Content-Length` or a body checksum.\n   * - finalizeRequest: The request is being prepared to be sent over the wire. The\n   *      request in this stage should already be semantically complete and\n   *      should therefore only be altered as match the recipient's\n   *      expectations. Examples of typical finalization tasks include request\n   *      signing and injecting hop-by-hop headers.\n   * - deserialize: The response has arrived, the middleware here will deserialize\n   *      the raw response object to structured response\n   *\n   *      Unlike initialization and build handlers, which are executed once\n   *      per operation execution, finalization and deserialize handlers will be\n   *      executed foreach HTTP request sent.\n   *\n   * @default 'initialize'\n   */\n  step?: Step;\n\n  /**\n   * A list of strings to any that identify the general purpose or important\n   * characteristics of a given handler.\n   */\n  tags?: Array<string>;\n\n  /**\n   * A unique name to refer to a middleware\n   */\n  name?: string;\n}\nexport interface AbsoluteLocation {\n  /**\n   * By default middleware will be added to individual step in un-guaranteed order.\n   * In the case that\n   *\n   * @default 'normal'\n   */\n  priority?: Priority;\n}\n\nexport type Relation = \"before\" | \"after\";\n\nexport interface RelativeLocation {\n  /**\n   * Specify the relation to be before or after a know middleware.\n   */\n  relation: Relation;\n\n  /**\n   * A known middleware name to indicate inserting middleware's location.\n   */\n  toMiddleware: string;\n}\n\nexport type RelativeMiddlewareOptions = RelativeLocation & Omit<HandlerOptions, \"step\">;\n\nexport interface InitializeHandlerOptions extends HandlerOptions {\n  step?: \"initialize\";\n}\n\nexport interface SerializeHandlerOptions extends HandlerOptions {\n  step: \"serialize\";\n}\n\nexport interface BuildHandlerOptions extends HandlerOptions {\n  step: \"build\";\n}\n\nexport interface FinalizeRequestHandlerOptions extends HandlerOptions {\n  step: \"finalizeRequest\";\n}\n\nexport interface DeserializeHandlerOptions extends HandlerOptions {\n  step: \"deserialize\";\n}\n\n/**\n * A stack storing middleware. It can be resolved into a handler. It supports 2\n * approaches for adding middleware:\n * 1. Adding middleware to specific step with `add()`. The order of middleware\n *    added into same step is determined by order of adding them. If one middleware\n *    needs to be executed at the front of the step or at the end of step, set\n *    `priority` options to `high` or `low`.\n * 2. Adding middleware to location relative to known middleware with `addRelativeTo()`.\n *    This is useful when given middleware must be executed before or after specific\n *    middleware(`toMiddleware`). You can add a middleware relatively to another\n *    middleware which also added relatively. But eventually, this relative middleware\n *    chain **must** be 'anchored' by a middleware that added using `add()` API\n *    with absolute `step` and `priority`. This mothod will throw if specified\n *    `toMiddleware` is not found.\n */\nexport interface MiddlewareStack<Input extends object, Output extends object> extends Pluggable<Input, Output> {\n  /**\n   * Add middleware to the stack to be executed during the \"initialize\" step,\n   * optionally specifying a priority, tags and name\n   */\n  add(middleware: InitializeMiddleware<Input, Output>, options?: InitializeHandlerOptions & AbsoluteLocation): void;\n\n  /**\n   * Add middleware to the stack to be executed during the \"serialize\" step,\n   * optionally specifying a priority, tags and name\n   */\n  add(middleware: SerializeMiddleware<Input, Output>, options: SerializeHandlerOptions & AbsoluteLocation): void;\n\n  /**\n   * Add middleware to the stack to be executed during the \"build\" step,\n   * optionally specifying a priority, tags and name\n   */\n  add(middleware: BuildMiddleware<Input, Output>, options: BuildHandlerOptions & AbsoluteLocation): void;\n\n  /**\n   * Add middleware to the stack to be executed during the \"finalizeRequest\" step,\n   * optionally specifying a priority, tags and name\n   */\n  add(\n    middleware: FinalizeRequestMiddleware<Input, Output>,\n    options: FinalizeRequestHandlerOptions & AbsoluteLocation\n  ): void;\n\n  /**\n   * Add middleware to the stack to be executed during the \"deserialize\" step,\n   * optionally specifying a priority, tags and name\n   */\n  add(middleware: DeserializeMiddleware<Input, Output>, options: DeserializeHandlerOptions & AbsoluteLocation): void;\n\n  /**\n   * Add middleware to a stack position before or after a known middleware，optionally\n   * specifying name and tags.\n   */\n  addRelativeTo(middleware: MiddlewareType<Input, Output>, options: RelativeMiddlewareOptions): void;\n\n  /**\n   * Apply a customization function to mutate the middleware stack, often\n   * used for customizations that requires mutating multiple middleware.\n   */\n  use(pluggable: Pluggable<Input, Output>): void;\n\n  /**\n   * Create a shallow clone of this stack. Step bindings and handler priorities\n   * and tags are preserved in the copy.\n   */\n  clone(): MiddlewareStack<Input, Output>;\n\n  /**\n   * Removes middleware from the stack.\n   *\n   * If a string is provided, it will be treated as middleware name. If a middleware\n   * is inserted with the given name, it will be removed.\n   *\n   * If a middleware class is provided, all usages thereof will be removed.\n   */\n  remove(toRemove: MiddlewareType<Input, Output> | string): boolean;\n\n  /**\n   * Removes middleware that contains given tag\n   *\n   * Multiple middleware will potentially be removed\n   */\n  removeByTag(toRemove: string): boolean;\n\n  /**\n   * Create a stack containing the middlewares in this stack as well as the\n   * middlewares in the `from` stack. Neither source is modified, and step\n   * bindings and handler priorities and tags are preserved in the copy.\n   */\n  concat<InputType extends Input, OutputType extends Output>(\n    from: MiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType>;\n\n  /**\n   * Builds a single handler function from zero or more middleware classes and\n   * a core handler. The core handler is meant to send command objects to AWS\n   * services and return promises that will resolve with the operation result\n   * or be rejected with an error.\n   *\n   * When a composed handler is invoked, the arguments will pass through all\n   * middleware in a defined order, and the return from the innermost handler\n   * will pass through all middleware in the reverse of that order.\n   */\n  resolve<InputType extends Input, OutputType extends Output>(\n    handler: DeserializeHandler<InputType, OutputType>,\n    context: HandlerExecutionContext\n  ): InitializeHandler<InputType, OutputType>;\n}\n\n/**\n * Data and helper objects that are not expected to change from one execution of\n * a composed handler to another.\n */\nexport interface HandlerExecutionContext {\n  /**\n   * A logger that may be invoked by any handler during execution of an\n   * operation.\n   */\n  logger?: Logger;\n\n  [key: string]: any;\n}\n\nexport interface Pluggable<Input extends object, Output extends object> {\n  /**\n   * A function that mutate the passed in middleware stack. Functions implementing\n   * this interface can add, remove, modify existing middleware stack from clients\n   * or commands\n   */\n  applyToStack: (stack: MiddlewareStack<Input, Output>) => void;\n}\n"]}