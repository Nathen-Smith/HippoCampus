"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamMarshaller = void 0;
const eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
const eventstream_serde_universal_1 = require("@aws-sdk/eventstream-serde-universal");
const utils_1 = require("./utils");
/**
 * Utility class used to serialize and deserialize event streams in
 * browsers and ReactNative.
 *
 * In browsers where ReadableStream API is available:
 * * deserialize from ReadableStream to an async iterable of output structure
 * * serialize from async iterable of input structure to ReadableStream
 * In ReactNative where only async iterable API is available:
 * * deserialize from async iterable of binaries to async iterable of output structure
 * * serialize from async iterable of input structure to async iterable of binaries
 *
 * We use ReadableStream API in browsers because of the consistency with other
 * streaming operations, where ReadableStream API is used to denote streaming data.
 * Whereas in ReactNative, ReadableStream API is not available, we use async iterable
 * for streaming data although it has lower throughput.
 */
class EventStreamMarshaller {
    constructor({ utf8Encoder, utf8Decoder }) {
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
        this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({
            utf8Decoder,
            utf8Encoder,
        });
    }
    deserialize(body, deserializer) {
        const bodyIterable = isReadableStream(body) ? utils_1.readableStreamtoIterable(body) : body;
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    /**
     * Generate a stream that serialize events into stream of binary chunks;
     *
     * Caveat is that streaming request payload doesn't work on browser with native
     * xhr or fetch handler currently because they don't support upload streaming.
     * reference:
     * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906
     * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483
     *
     */
    serialize(input, serializer) {
        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
        return typeof ReadableStream === "function" ? utils_1.iterableToReadableStream(serialziedIterable) : serialziedIterable;
    }
}
exports.EventStreamMarshaller = EventStreamMarshaller;
const isReadableStream = (body) => typeof ReadableStream === "function" && body instanceof ReadableStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0RUFBMkY7QUFDM0Ysc0ZBQStHO0FBRy9HLG1DQUE2RTtBQVM3RTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFhLHFCQUFxQjtJQUdoQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBZ0M7UUFDcEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLDhDQUFlLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLG1EQUE4QixDQUFDO1lBQzVELFdBQVc7WUFDWCxXQUFXO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FDVCxJQUE0RCxFQUM1RCxZQUFpRTtRQUVqRSxNQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0NBQXdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNwRixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSCxTQUFTLENBQUksS0FBdUIsRUFBRSxVQUFpQztRQUNyRSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sT0FBTyxjQUFjLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxnQ0FBd0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztJQUNsSCxDQUFDO0NBQ0Y7QUFqQ0Qsc0RBaUNDO0FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQVMsRUFBMEIsRUFBRSxDQUM3RCxPQUFPLGNBQWMsS0FBSyxVQUFVLElBQUksSUFBSSxZQUFZLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBFdmVudE1hcnNoYWxsZXIgfSBmcm9tIFwiQGF3cy1zZGsvZXZlbnRzdHJlYW0tbWFyc2hhbGxlclwiO1xuaW1wb3J0IHsgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGFzIFVuaXZlcnNhbEV2ZW50U3RyZWFtTWFyc2hhbGxlciB9IGZyb20gXCJAYXdzLXNkay9ldmVudHN0cmVhbS1zZXJkZS11bml2ZXJzYWxcIjtcbmltcG9ydCB7IERlY29kZXIsIEVuY29kZXIsIEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBJRXZlbnRTdHJlYW1NYXJzaGFsbGVyLCBNZXNzYWdlIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IGl0ZXJhYmxlVG9SZWFkYWJsZVN0cmVhbSwgcmVhZGFibGVTdHJlYW10b0l0ZXJhYmxlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudFN0cmVhbU1hcnNoYWxsZXIgZXh0ZW5kcyBJRXZlbnRTdHJlYW1NYXJzaGFsbGVyIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRTdHJlYW1NYXJzaGFsbGVyT3B0aW9ucyB7XG4gIHV0ZjhFbmNvZGVyOiBFbmNvZGVyO1xuICB1dGY4RGVjb2RlcjogRGVjb2Rlcjtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IGNsYXNzIHVzZWQgdG8gc2VyaWFsaXplIGFuZCBkZXNlcmlhbGl6ZSBldmVudCBzdHJlYW1zIGluXG4gKiBicm93c2VycyBhbmQgUmVhY3ROYXRpdmUuXG4gKlxuICogSW4gYnJvd3NlcnMgd2hlcmUgUmVhZGFibGVTdHJlYW0gQVBJIGlzIGF2YWlsYWJsZTpcbiAqICogZGVzZXJpYWxpemUgZnJvbSBSZWFkYWJsZVN0cmVhbSB0byBhbiBhc3luYyBpdGVyYWJsZSBvZiBvdXRwdXQgc3RydWN0dXJlXG4gKiAqIHNlcmlhbGl6ZSBmcm9tIGFzeW5jIGl0ZXJhYmxlIG9mIGlucHV0IHN0cnVjdHVyZSB0byBSZWFkYWJsZVN0cmVhbVxuICogSW4gUmVhY3ROYXRpdmUgd2hlcmUgb25seSBhc3luYyBpdGVyYWJsZSBBUEkgaXMgYXZhaWxhYmxlOlxuICogKiBkZXNlcmlhbGl6ZSBmcm9tIGFzeW5jIGl0ZXJhYmxlIG9mIGJpbmFyaWVzIHRvIGFzeW5jIGl0ZXJhYmxlIG9mIG91dHB1dCBzdHJ1Y3R1cmVcbiAqICogc2VyaWFsaXplIGZyb20gYXN5bmMgaXRlcmFibGUgb2YgaW5wdXQgc3RydWN0dXJlIHRvIGFzeW5jIGl0ZXJhYmxlIG9mIGJpbmFyaWVzXG4gKlxuICogV2UgdXNlIFJlYWRhYmxlU3RyZWFtIEFQSSBpbiBicm93c2VycyBiZWNhdXNlIG9mIHRoZSBjb25zaXN0ZW5jeSB3aXRoIG90aGVyXG4gKiBzdHJlYW1pbmcgb3BlcmF0aW9ucywgd2hlcmUgUmVhZGFibGVTdHJlYW0gQVBJIGlzIHVzZWQgdG8gZGVub3RlIHN0cmVhbWluZyBkYXRhLlxuICogV2hlcmVhcyBpbiBSZWFjdE5hdGl2ZSwgUmVhZGFibGVTdHJlYW0gQVBJIGlzIG5vdCBhdmFpbGFibGUsIHdlIHVzZSBhc3luYyBpdGVyYWJsZVxuICogZm9yIHN0cmVhbWluZyBkYXRhIGFsdGhvdWdoIGl0IGhhcyBsb3dlciB0aHJvdWdocHV0LlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudE1hcnNoYWxsZXI6IEV2ZW50TWFyc2hhbGxlcjtcbiAgcHJpdmF0ZSByZWFkb25seSB1bml2ZXJzYWxNYXJzaGFsbGVyOiBVbml2ZXJzYWxFdmVudFN0cmVhbU1hcnNoYWxsZXI7XG4gIGNvbnN0cnVjdG9yKHsgdXRmOEVuY29kZXIsIHV0ZjhEZWNvZGVyIH06IEV2ZW50U3RyZWFtTWFyc2hhbGxlck9wdGlvbnMpIHtcbiAgICB0aGlzLmV2ZW50TWFyc2hhbGxlciA9IG5ldyBFdmVudE1hcnNoYWxsZXIodXRmOEVuY29kZXIsIHV0ZjhEZWNvZGVyKTtcbiAgICB0aGlzLnVuaXZlcnNhbE1hcnNoYWxsZXIgPSBuZXcgVW5pdmVyc2FsRXZlbnRTdHJlYW1NYXJzaGFsbGVyKHtcbiAgICAgIHV0ZjhEZWNvZGVyLFxuICAgICAgdXRmOEVuY29kZXIsXG4gICAgfSk7XG4gIH1cblxuICBkZXNlcmlhbGl6ZTxUPihcbiAgICBib2R5OiBSZWFkYWJsZVN0cmVhbTxVaW50OEFycmF5PiB8IEFzeW5jSXRlcmFibGU8VWludDhBcnJheT4sXG4gICAgZGVzZXJpYWxpemVyOiAoaW5wdXQ6IHsgW2V2ZW50OiBzdHJpbmddOiBNZXNzYWdlIH0pID0+IFByb21pc2U8VD5cbiAgKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gICAgY29uc3QgYm9keUl0ZXJhYmxlID0gaXNSZWFkYWJsZVN0cmVhbShib2R5KSA/IHJlYWRhYmxlU3RyZWFtdG9JdGVyYWJsZShib2R5KSA6IGJvZHk7XG4gICAgcmV0dXJuIHRoaXMudW5pdmVyc2FsTWFyc2hhbGxlci5kZXNlcmlhbGl6ZShib2R5SXRlcmFibGUsIGRlc2VyaWFsaXplcik7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBzdHJlYW0gdGhhdCBzZXJpYWxpemUgZXZlbnRzIGludG8gc3RyZWFtIG9mIGJpbmFyeSBjaHVua3M7XG4gICAqXG4gICAqIENhdmVhdCBpcyB0aGF0IHN0cmVhbWluZyByZXF1ZXN0IHBheWxvYWQgZG9lc24ndCB3b3JrIG9uIGJyb3dzZXIgd2l0aCBuYXRpdmVcbiAgICogeGhyIG9yIGZldGNoIGhhbmRsZXIgY3VycmVudGx5IGJlY2F1c2UgdGhleSBkb24ndCBzdXBwb3J0IHVwbG9hZCBzdHJlYW1pbmcuXG4gICAqIHJlZmVyZW5jZTpcbiAgICogKiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02ODg5MDZcbiAgICogKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzg3NDgzXG4gICAqXG4gICAqL1xuICBzZXJpYWxpemU8VD4oaW5wdXQ6IEFzeW5jSXRlcmFibGU8VD4sIHNlcmlhbGl6ZXI6IChldmVudDogVCkgPT4gTWVzc2FnZSk6IFJlYWRhYmxlU3RyZWFtIHwgQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5PiB7XG4gICAgY29uc3Qgc2VyaWFsemllZEl0ZXJhYmxlID0gdGhpcy51bml2ZXJzYWxNYXJzaGFsbGVyLnNlcmlhbGl6ZShpbnB1dCwgc2VyaWFsaXplcik7XG4gICAgcmV0dXJuIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gXCJmdW5jdGlvblwiID8gaXRlcmFibGVUb1JlYWRhYmxlU3RyZWFtKHNlcmlhbHppZWRJdGVyYWJsZSkgOiBzZXJpYWx6aWVkSXRlcmFibGU7XG4gIH1cbn1cblxuY29uc3QgaXNSZWFkYWJsZVN0cmVhbSA9IChib2R5OiBhbnkpOiBib2R5IGlzIFJlYWRhYmxlU3RyZWFtID0+XG4gIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gXCJmdW5jdGlvblwiICYmIGJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbTtcbiJdfQ==