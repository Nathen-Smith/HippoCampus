import { __assign, __awaiter, __generator, __values } from "tslib";
import { isArrayBuffer } from "@aws-sdk/is-array-buffer";
import { HttpRequest } from "@aws-sdk/protocol-http";
export function applyMd5BodyChecksumMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return __awaiter(_this, void 0, void 0, function () {
        var request, body, headers, digest, hash, _a, _b, _c, _d, _e;
        var _f, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    request = args.request;
                    if (!HttpRequest.isInstance(request)) return [3 /*break*/, 2];
                    body = request.body, headers = request.headers;
                    if (!!hasHeader("Content-MD5", headers)) return [3 /*break*/, 2];
                    digest = void 0;
                    if (body === undefined || typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
                        hash = new options.md5();
                        hash.update(body || "");
                        digest = hash.digest();
                    }
                    else {
                        digest = options.streamHasher(options.md5, body);
                    }
                    _a = [__assign({}, request)];
                    _f = {};
                    _b = [__assign({}, headers)];
                    _g = {};
                    _c = "Content-MD5";
                    _e = (_d = options).base64Encoder;
                    return [4 /*yield*/, digest];
                case 1:
                    request = __assign.apply(void 0, _a.concat([(_f.headers = __assign.apply(void 0, _b.concat([(_g[_c] = _e.apply(_d, [_h.sent()]), _g)])), _f)]));
                    _h.label = 2;
                case 2: return [2 /*return*/, next(__assign(__assign({}, args), { request: request }))];
            }
        });
    }); }; };
}
export var applyMd5BodyChecksumMiddlewareOptions = {
    name: "applyMd5BodyChecksumMiddleware",
    step: "build",
    tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"],
    override: true,
};
export var getApplyMd5BodyChecksumPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);
    },
}); };
function hasHeader(soughtHeader, headers) {
    var e_1, _a;
    soughtHeader = soughtHeader.toLowerCase();
    try {
        for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQWNyRCxNQUFNLFVBQVUsOEJBQThCLENBQUMsT0FBc0M7SUFBckYsaUJBK0JDO0lBOUJDLE9BQU8sVUFBZ0MsSUFBK0IsSUFBZ0MsT0FBQSxVQUNwRyxJQUFnQzs7Ozs7O29CQUUxQixPQUFPLEdBQUssSUFBSSxRQUFULENBQVU7eUJBQ25CLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQS9CLHdCQUErQjtvQkFDekIsSUFBSSxHQUFjLE9BQU8sS0FBckIsRUFBRSxPQUFPLEdBQUssT0FBTyxRQUFaLENBQWE7eUJBQzlCLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBbEMsd0JBQWtDO29CQUNoQyxNQUFNLFNBQXFCLENBQUM7b0JBQ2hDLElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQy9GLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQzt3QkFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7d0JBQ3hCLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7cUJBQ3hCO3lCQUFNO3dCQUNMLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7cUJBQ2xEO3VDQUdJLE9BQU87O3VDQUVMLE9BQU87O29CQUNWLEtBQUEsYUFBYSxDQUFBO29CQUFFLEtBQUEsQ0FBQSxLQUFBLE9BQU8sQ0FBQSxDQUFDLGFBQWEsQ0FBQTtvQkFBQyxxQkFBTSxNQUFNLEVBQUE7O29CQUpyRCxPQUFPLHNDQUVMLFVBQU8sc0NBRUwsTUFBYSxHQUFFLGNBQXNCLFNBQVksRUFBQyxnQkFFckQsQ0FBQzs7d0JBR04sc0JBQU8sSUFBSSx1QkFDTixJQUFJLEtBQ1AsT0FBTyxTQUFBLElBQ1AsRUFBQzs7O1NBQ0osRUE3QnFHLENBNkJyRyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLHFDQUFxQyxHQUF3QjtJQUN4RSxJQUFJLEVBQUUsZ0NBQWdDO0lBQ3RDLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxDQUFDO0lBQzFDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLFVBQUMsTUFBcUMsSUFBMEIsT0FBQSxDQUFDO0lBQzVHLFlBQVksRUFBRSxVQUFDLFdBQVc7UUFDeEIsV0FBVyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxNQUFNLENBQUMsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7Q0FDRixDQUFDLEVBSjJHLENBSTNHLENBQUM7QUFFSCxTQUFTLFNBQVMsQ0FBQyxZQUFvQixFQUFFLE9BQWtCOztJQUN6RCxZQUFZLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDOztRQUMxQyxLQUF5QixJQUFBLEtBQUEsU0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO1lBQTFDLElBQU0sVUFBVSxXQUFBO1lBQ25CLElBQUksWUFBWSxLQUFLLFVBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGOzs7Ozs7Ozs7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2lzLWFycmF5LWJ1ZmZlclwiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHtcbiAgQnVpbGRIYW5kbGVyLFxuICBCdWlsZEhhbmRsZXJBcmd1bWVudHMsXG4gIEJ1aWxkSGFuZGxlck9wdGlvbnMsXG4gIEJ1aWxkSGFuZGxlck91dHB1dCxcbiAgQnVpbGRNaWRkbGV3YXJlLFxuICBIZWFkZXJCYWcsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBNZDVCb2R5Q2hlY2tzdW1SZXNvbHZlZENvbmZpZyB9IGZyb20gXCIuL21kNUNvbmZpZ3VyYXRpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZShvcHRpb25zOiBNZDVCb2R5Q2hlY2tzdW1SZXNvbHZlZENvbmZpZyk6IEJ1aWxkTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihuZXh0OiBCdWlsZEhhbmRsZXI8YW55LCBPdXRwdXQ+KTogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0PiA9PiBhc3luYyAoXG4gICAgYXJnczogQnVpbGRIYW5kbGVyQXJndW1lbnRzPGFueT5cbiAgKTogUHJvbWlzZTxCdWlsZEhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgIGxldCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKEh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycyB9ID0gcmVxdWVzdDtcbiAgICAgIGlmICghaGFzSGVhZGVyKFwiQ29udGVudC1NRDVcIiwgaGVhZGVycykpIHtcbiAgICAgICAgbGV0IGRpZ2VzdDogUHJvbWlzZTxVaW50OEFycmF5PjtcbiAgICAgICAgaWYgKGJvZHkgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkgfHwgaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgb3B0aW9ucy5tZDUoKTtcbiAgICAgICAgICBoYXNoLnVwZGF0ZShib2R5IHx8IFwiXCIpO1xuICAgICAgICAgIGRpZ2VzdCA9IGhhc2guZGlnZXN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlnZXN0ID0gb3B0aW9ucy5zdHJlYW1IYXNoZXIob3B0aW9ucy5tZDUsIGJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICAuLi5yZXF1ZXN0LFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgICBcIkNvbnRlbnQtTUQ1XCI6IG9wdGlvbnMuYmFzZTY0RW5jb2Rlcihhd2FpdCBkaWdlc3QpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHtcbiAgICAgIC4uLmFyZ3MsXG4gICAgICByZXF1ZXN0LFxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlT3B0aW9uczogQnVpbGRIYW5kbGVyT3B0aW9ucyA9IHtcbiAgbmFtZTogXCJhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmVcIixcbiAgc3RlcDogXCJidWlsZFwiLFxuICB0YWdzOiBbXCJTRVRfQ09OVEVOVF9NRDVcIiwgXCJCT0RZX0NIRUNLU1VNXCJdLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBcHBseU1kNUJvZHlDaGVja3N1bVBsdWdpbiA9IChjb25maWc6IE1kNUJvZHlDaGVja3N1bVJlc29sdmVkQ29uZmlnKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmUoY29uZmlnKSwgYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcblxuZnVuY3Rpb24gaGFzSGVhZGVyKHNvdWdodEhlYWRlcjogc3RyaW5nLCBoZWFkZXJzOiBIZWFkZXJCYWcpOiBib29sZWFuIHtcbiAgc291Z2h0SGVhZGVyID0gc291Z2h0SGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgIGlmIChzb3VnaHRIZWFkZXIgPT09IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19