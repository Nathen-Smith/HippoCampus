"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromCognitoIdentity = void 0;
const client_cognito_identity_1 = require("@aws-sdk/client-cognito-identity");
const property_provider_1 = require("@aws-sdk/property-provider");
const resolveLogins_1 = require("./resolveLogins");
/**
 * Retrieves temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from this function call are not cached internally.
 */
function fromCognitoIdentity(parameters) {
    return async () => {
        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(), Expiration, SecretKey = throwOnMissingSecretKey(), SessionToken, } = throwOnMissingCredentials(), } = await parameters.client.send(new client_cognito_identity_1.GetCredentialsForIdentityCommand({
            CustomRoleArn: parameters.customRoleArn,
            IdentityId: parameters.identityId,
            Logins: parameters.logins ? await resolveLogins_1.resolveLogins(parameters.logins) : undefined,
        }));
        return {
            identityId: parameters.identityId,
            accessKeyId: AccessKeyId,
            secretAccessKey: SecretKey,
            sessionToken: SessionToken,
            expiration: Expiration,
        };
    };
}
exports.fromCognitoIdentity = fromCognitoIdentity;
function throwOnMissingAccessKeyId() {
    throw new property_provider_1.ProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new property_provider_1.ProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new property_provider_1.ProviderError("Response from Amazon Cognito contained no secret key");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tQ29nbml0b0lkZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhFQUFvRjtBQUNwRixrRUFBMkQ7QUFJM0QsbURBQWdEO0FBU2hEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsbUJBQW1CLENBQUMsVUFBeUM7SUFDM0UsT0FBTyxLQUFLLElBQXlDLEVBQUU7UUFDckQsTUFBTSxFQUNKLFdBQVcsRUFBRSxFQUNYLFdBQVcsR0FBRyx5QkFBeUIsRUFBRSxFQUN6QyxVQUFVLEVBQ1YsU0FBUyxHQUFHLHVCQUF1QixFQUFFLEVBQ3JDLFlBQVksR0FDYixHQUFHLHlCQUF5QixFQUFFLEdBQ2hDLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDOUIsSUFBSSwwREFBZ0MsQ0FBQztZQUNuQyxhQUFhLEVBQUUsVUFBVSxDQUFDLGFBQWE7WUFDdkMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVO1lBQ2pDLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLDZCQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1NBQy9FLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTztZQUNMLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTtZQUNqQyxXQUFXLEVBQUUsV0FBVztZQUN4QixlQUFlLEVBQUUsU0FBUztZQUMxQixZQUFZLEVBQUUsWUFBWTtZQUMxQixVQUFVLEVBQUUsVUFBVTtTQUN2QixDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQXpCRCxrREF5QkM7QUFVRCxTQUFTLHlCQUF5QjtJQUNoQyxNQUFNLElBQUksaUNBQWEsQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCxTQUFTLHlCQUF5QjtJQUNoQyxNQUFNLElBQUksaUNBQWEsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQ25GLENBQUM7QUFFRCxTQUFTLHVCQUF1QjtJQUM5QixNQUFNLElBQUksaUNBQWEsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0FBQ2xGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtY29nbml0by1pZGVudGl0eVwiO1xuaW1wb3J0IHsgUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAYXdzLXNkay9wcm9wZXJ0eS1wcm92aWRlclwiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbFByb3ZpZGVyLCBDcmVkZW50aWFscyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBDb2duaXRvUHJvdmlkZXJQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgcmVzb2x2ZUxvZ2lucyB9IGZyb20gXCIuL3Jlc29sdmVMb2dpbnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyBleHRlbmRzIENyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIFRoZSBDb2duaXRvIElEIHJldHVybmVkIGJ5IHRoZSBsYXN0IGNhbGwgdG8gQVdTLkNvZ25pdG9JZGVudGl0eS5nZXRPcGVuSWRUb2tlbigpLlxuICAgKi9cbiAgaWRlbnRpdHlJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0ZW1wb3JhcnkgQVdTIGNyZWRlbnRpYWxzIHVzaW5nIEFtYXpvbiBDb2duaXRvJ3NcbiAqIGBHZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5YCBvcGVyYXRpb24uXG4gKlxuICogUmVzdWx0cyBmcm9tIHRoaXMgZnVuY3Rpb24gY2FsbCBhcmUgbm90IGNhY2hlZCBpbnRlcm5hbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUNvZ25pdG9JZGVudGl0eShwYXJhbWV0ZXJzOiBGcm9tQ29nbml0b0lkZW50aXR5UGFyYW1ldGVycyk6IENyZWRlbnRpYWxQcm92aWRlciB7XG4gIHJldHVybiBhc3luYyAoKTogUHJvbWlzZTxDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscz4gPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIENyZWRlbnRpYWxzOiB7XG4gICAgICAgIEFjY2Vzc0tleUlkID0gdGhyb3dPbk1pc3NpbmdBY2Nlc3NLZXlJZCgpLFxuICAgICAgICBFeHBpcmF0aW9uLFxuICAgICAgICBTZWNyZXRLZXkgPSB0aHJvd09uTWlzc2luZ1NlY3JldEtleSgpLFxuICAgICAgICBTZXNzaW9uVG9rZW4sXG4gICAgICB9ID0gdGhyb3dPbk1pc3NpbmdDcmVkZW50aWFscygpLFxuICAgIH0gPSBhd2FpdCBwYXJhbWV0ZXJzLmNsaWVudC5zZW5kKFxuICAgICAgbmV3IEdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlDb21tYW5kKHtcbiAgICAgICAgQ3VzdG9tUm9sZUFybjogcGFyYW1ldGVycy5jdXN0b21Sb2xlQXJuLFxuICAgICAgICBJZGVudGl0eUlkOiBwYXJhbWV0ZXJzLmlkZW50aXR5SWQsXG4gICAgICAgIExvZ2luczogcGFyYW1ldGVycy5sb2dpbnMgPyBhd2FpdCByZXNvbHZlTG9naW5zKHBhcmFtZXRlcnMubG9naW5zKSA6IHVuZGVmaW5lZCxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZGVudGl0eUlkOiBwYXJhbWV0ZXJzLmlkZW50aXR5SWQsXG4gICAgICBhY2Nlc3NLZXlJZDogQWNjZXNzS2V5SWQsXG4gICAgICBzZWNyZXRBY2Nlc3NLZXk6IFNlY3JldEtleSxcbiAgICAgIHNlc3Npb25Ub2tlbjogU2Vzc2lvblRva2VuLFxuICAgICAgZXhwaXJhdGlvbjogRXhwaXJhdGlvbixcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZyb21Db2duaXRvSWRlbnRpdHlQYXJhbWV0ZXJzIGV4dGVuZHMgQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVycyB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBpZGVudGl0eSBhZ2FpbnN0IHdoaWNoIGNyZWRlbnRpYWxzIHdpbGwgYmVcbiAgICogaXNzdWVkLlxuICAgKi9cbiAgaWRlbnRpdHlJZDogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uTWlzc2luZ0FjY2Vzc0tleUlkKCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXCJSZXNwb25zZSBmcm9tIEFtYXpvbiBDb2duaXRvIGNvbnRhaW5lZCBubyBhY2Nlc3Mga2V5IElEXCIpO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uTWlzc2luZ0NyZWRlbnRpYWxzKCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXCJSZXNwb25zZSBmcm9tIEFtYXpvbiBDb2duaXRvIGNvbnRhaW5lZCBubyBjcmVkZW50aWFsc1wiKTtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbk1pc3NpbmdTZWNyZXRLZXkoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcIlJlc3BvbnNlIGZyb20gQW1hem9uIENvZ25pdG8gY29udGFpbmVkIG5vIHNlY3JldCBrZXlcIik7XG59XG4iXX0=