"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromCognitoIdentityPool = void 0;
const client_cognito_identity_1 = require("@aws-sdk/client-cognito-identity");
const property_provider_1 = require("@aws-sdk/property-provider");
const fromCognitoIdentity_1 = require("./fromCognitoIdentity");
const localStorage_1 = require("./localStorage");
const resolveLogins_1 = require("./resolveLogins");
/**
 * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`
 * operation, then generates temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from `GetId` are cached internally, but results from
 * `GetCredentialsForIdentity` are not.
 */
function fromCognitoIdentityPool({ accountId, cache = localStorage_1.localStorage(), client, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined, }) {
    const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;
    let provider = async () => {
        let identityId = cacheKey && (await cache.getItem(cacheKey));
        if (!identityId) {
            const { IdentityId = throwOnMissingId() } = await client.send(new client_cognito_identity_1.GetIdCommand({
                AccountId: accountId,
                IdentityPoolId: identityPoolId,
                Logins: logins ? await resolveLogins_1.resolveLogins(logins) : undefined,
            }));
            identityId = IdentityId;
            if (cacheKey) {
                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });
            }
        }
        provider = fromCognitoIdentity_1.fromCognitoIdentity({
            client,
            customRoleArn,
            logins,
            identityId,
        });
        return provider();
    };
    return () => provider().catch(async (err) => {
        if (cacheKey) {
            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });
        }
        throw err;
    });
}
exports.fromCognitoIdentityPool = fromCognitoIdentityPool;
function throwOnMissingId() {
    throw new property_provider_1.ProviderError("Response from Amazon Cognito contained no identity ID");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOEVBQWdFO0FBQ2hFLGtFQUEyRDtBQUkzRCwrREFBNEQ7QUFDNUQsaURBQThDO0FBQzlDLG1EQUFnRDtBQUdoRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsRUFDdEMsU0FBUyxFQUNULEtBQUssR0FBRywyQkFBWSxFQUFFLEVBQ3RCLE1BQU0sRUFDTixhQUFhLEVBQ2IsY0FBYyxFQUNkLE1BQU0sRUFDTixjQUFjLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FDcEQ7SUFDbEMsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxvQ0FBb0MsY0FBYyxJQUFJLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFckgsSUFBSSxRQUFRLEdBQXVCLEtBQUssSUFBSSxFQUFFO1FBQzVDLElBQUksVUFBVSxHQUFHLFFBQVEsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixNQUFNLEVBQUUsVUFBVSxHQUFHLGdCQUFnQixFQUFFLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQzNELElBQUksc0NBQVksQ0FBQztnQkFDZixTQUFTLEVBQUUsU0FBUztnQkFDcEIsY0FBYyxFQUFFLGNBQWM7Z0JBQzlCLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sNkJBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUzthQUN6RCxDQUFDLENBQ0gsQ0FBQztZQUNGLFVBQVUsR0FBRyxVQUFVLENBQUM7WUFDeEIsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQzthQUN0RTtTQUNGO1FBRUQsUUFBUSxHQUFHLHlDQUFtQixDQUFDO1lBQzdCLE1BQU07WUFDTixhQUFhO1lBQ2IsTUFBTTtZQUNOLFVBQVU7U0FDWCxDQUFDLENBQUM7UUFFSCxPQUFPLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxFQUFFLENBQ1YsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUM3QixJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztTQUM3RDtRQUVELE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBN0NELDBEQTZDQztBQXNDRCxTQUFTLGdCQUFnQjtJQUN2QixNQUFNLElBQUksaUNBQWEsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQ25GLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRJZENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHlcIjtcbmltcG9ydCB7IFByb3ZpZGVyRXJyb3IgfSBmcm9tIFwiQGF3cy1zZGsvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBDb2duaXRvUHJvdmlkZXJQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgZnJvbUNvZ25pdG9JZGVudGl0eSB9IGZyb20gXCIuL2Zyb21Db2duaXRvSWRlbnRpdHlcIjtcbmltcG9ydCB7IGxvY2FsU3RvcmFnZSB9IGZyb20gXCIuL2xvY2FsU3RvcmFnZVwiO1xuaW1wb3J0IHsgcmVzb2x2ZUxvZ2lucyB9IGZyb20gXCIuL3Jlc29sdmVMb2dpbnNcIjtcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tIFwiLi9TdG9yYWdlXCI7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGdlbmVyYXRlcyBhIHVuaXF1ZSBpZGVudGlmaWVyIHVzaW5nIEFtYXpvbiBDb2duaXRvJ3MgYEdldElkYFxuICogb3BlcmF0aW9uLCB0aGVuIGdlbmVyYXRlcyB0ZW1wb3JhcnkgQVdTIGNyZWRlbnRpYWxzIHVzaW5nIEFtYXpvbiBDb2duaXRvJ3NcbiAqIGBHZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5YCBvcGVyYXRpb24uXG4gKlxuICogUmVzdWx0cyBmcm9tIGBHZXRJZGAgYXJlIGNhY2hlZCBpbnRlcm5hbGx5LCBidXQgcmVzdWx0cyBmcm9tXG4gKiBgR2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eWAgYXJlIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Db2duaXRvSWRlbnRpdHlQb29sKHtcbiAgYWNjb3VudElkLFxuICBjYWNoZSA9IGxvY2FsU3RvcmFnZSgpLFxuICBjbGllbnQsXG4gIGN1c3RvbVJvbGVBcm4sXG4gIGlkZW50aXR5UG9vbElkLFxuICBsb2dpbnMsXG4gIHVzZXJJZGVudGlmaWVyID0gIWxvZ2lucyB8fCBPYmplY3Qua2V5cyhsb2dpbnMpLmxlbmd0aCA9PT0gMCA/IFwiQU5PTllNT1VTXCIgOiB1bmRlZmluZWQsXG59OiBGcm9tQ29nbml0b0lkZW50aXR5UG9vbFBhcmFtZXRlcnMpOiBDcmVkZW50aWFsUHJvdmlkZXIge1xuICBjb25zdCBjYWNoZUtleSA9IHVzZXJJZGVudGlmaWVyID8gYGF3czpjb2duaXRvLWlkZW50aXR5LWNyZWRlbnRpYWxzOiR7aWRlbnRpdHlQb29sSWR9OiR7dXNlcklkZW50aWZpZXJ9YCA6IHVuZGVmaW5lZDtcblxuICBsZXQgcHJvdmlkZXI6IENyZWRlbnRpYWxQcm92aWRlciA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgaWRlbnRpdHlJZCA9IGNhY2hlS2V5ICYmIChhd2FpdCBjYWNoZS5nZXRJdGVtKGNhY2hlS2V5KSk7XG4gICAgaWYgKCFpZGVudGl0eUlkKSB7XG4gICAgICBjb25zdCB7IElkZW50aXR5SWQgPSB0aHJvd09uTWlzc2luZ0lkKCkgfSA9IGF3YWl0IGNsaWVudC5zZW5kKFxuICAgICAgICBuZXcgR2V0SWRDb21tYW5kKHtcbiAgICAgICAgICBBY2NvdW50SWQ6IGFjY291bnRJZCxcbiAgICAgICAgICBJZGVudGl0eVBvb2xJZDogaWRlbnRpdHlQb29sSWQsXG4gICAgICAgICAgTG9naW5zOiBsb2dpbnMgPyBhd2FpdCByZXNvbHZlTG9naW5zKGxvZ2lucykgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgaWRlbnRpdHlJZCA9IElkZW50aXR5SWQ7XG4gICAgICBpZiAoY2FjaGVLZXkpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGNhY2hlLnNldEl0ZW0oY2FjaGVLZXksIGlkZW50aXR5SWQpKS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvdmlkZXIgPSBmcm9tQ29nbml0b0lkZW50aXR5KHtcbiAgICAgIGNsaWVudCxcbiAgICAgIGN1c3RvbVJvbGVBcm4sXG4gICAgICBsb2dpbnMsXG4gICAgICBpZGVudGl0eUlkLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb3ZpZGVyKCk7XG4gIH07XG5cbiAgcmV0dXJuICgpID0+XG4gICAgcHJvdmlkZXIoKS5jYXRjaChhc3luYyAoZXJyKSA9PiB7XG4gICAgICBpZiAoY2FjaGVLZXkpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGNhY2hlLnJlbW92ZUl0ZW0oY2FjaGVLZXkpKS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGcm9tQ29nbml0b0lkZW50aXR5UG9vbFBhcmFtZXRlcnMgZXh0ZW5kcyBDb2duaXRvUHJvdmlkZXJQYXJhbWV0ZXJzIHtcbiAgLyoqXG4gICAqIEEgc3RhbmRhcmQgQVdTIGFjY291bnQgSUQgKDkrIGRpZ2l0cykuXG4gICAqL1xuICBhY2NvdW50SWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgY2FjaGUgaW4gd2hpY2ggdG8gc3RvcmUgcmVzb2x2ZWQgQ29nbml0byBJZGVudGl0eUlkcy4gSWYgbm90IHN1cHBsaWVkLFxuICAgKiB0aGUgY3JlZGVudGlhbCBwcm92aWRlciB3aWxsIGF0dGVtcHQgdG8gc3RvcmUgSWRlbnRpdHlJZHMgaW4gb25lIG9mIHRoZVxuICAgKiBmb2xsb3dpbmcgKGluIG9yZGVyIG9mIHByZWZlcmVuY2UpOlxuICAgKiAgIDEuIEluZGV4ZWREQlxuICAgKiAgIDIuIExvY2FsU3RvcmFnZVxuICAgKiAgIDMuIEFuIGluLW1lbW9yeSBjYWNoZSBvYmplY3QgdGhhdCB3aWxsIG5vdCBwZXJzaXN0IGJldHdlZW4gcGFnZXMuXG4gICAqXG4gICAqIEluZGV4ZWREQiBpcyBwcmVmZXJyZWQgdG8gbWF4aW1pemUgZGF0YSBzaGFyaW5nIGJldHdlZW4gdG9wLWxldmVsXG4gICAqIGJyb3dzaW5nIGNvbnRleHRzIGFuZCB3ZWIgd29ya2Vycy5cbiAgICpcbiAgICogVGhlIHByb3ZpZGVyIHdpbGwgbm90IGNhY2hlIElkZW50aXR5SWRzIG9mIGF1dGhlbnRpY2F0ZWQgdXNlcnMgdW5sZXNzIGFcbiAgICogc2VwYXJhdGUgYHVzZXJJZGVudGl0aWZlcmAgcGFyYW1ldGVyIGlzIHN1cHBsaWVkLlxuICAgKi9cbiAgY2FjaGU/OiBTdG9yYWdlO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBpZGVudGl0eSBwb29sIGZyb20gd2hpY2ggYW4gaWRlbnRpdHkgc2hvdWxkXG4gICAqIGJlIHJldHJpZXZlZCBvciBnZW5lcmF0ZWQuXG4gICAqL1xuICBpZGVudGl0eVBvb2xJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdXNlci4gVGhpcyBpcyBkaXN0aW5jdCBmcm9tIGEgQ29nbml0b1xuICAgKiBJZGVudGl0eUlkIGFuZCBzaG91bGQgaW5zdGVhZCBiZSBhbiBpZGVudGlmaWVyIG1lYW5pbmdmdWwgdG8geW91clxuICAgKiBhcHBsaWNhdGlvbi4gVXNlZCB0byBjYWNoZSBDb2duaXRvIElkZW50aXR5SWRzIG9uIGEgcGVyLXVzZXIgYmFzaXMuXG4gICAqL1xuICB1c2VySWRlbnRpZmllcj86IHN0cmluZztcbn1cblxuZnVuY3Rpb24gdGhyb3dPbk1pc3NpbmdJZCgpOiBuZXZlciB7XG4gIHRocm93IG5ldyBQcm92aWRlckVycm9yKFwiUmVzcG9uc2UgZnJvbSBBbWF6b24gQ29nbml0byBjb250YWluZWQgbm8gaWRlbnRpdHkgSURcIik7XG59XG4iXX0=